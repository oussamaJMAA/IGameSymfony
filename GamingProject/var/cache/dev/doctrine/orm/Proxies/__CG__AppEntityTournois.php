<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Tournois extends \App\Entity\Tournois implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'nomTournois', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'capacite', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'platforme', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'recompense', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'dateTournois', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'ptsXp', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'timeT', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'participations'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'nomTournois', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'capacite', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'platforme', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'recompense', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'dateTournois', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'ptsXp', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'timeT', '' . "\0" . 'App\\Entity\\Tournois' . "\0" . 'participations'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Tournois $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getNomTournois(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomTournois', []);

        return parent::getNomTournois();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomTournois(string $nomTournois): \App\Entity\Tournois
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomTournois', [$nomTournois]);

        return parent::setNomTournois($nomTournois);
    }

    /**
     * {@inheritDoc}
     */
    public function getCapacite(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCapacite', []);

        return parent::getCapacite();
    }

    /**
     * {@inheritDoc}
     */
    public function setCapacite(int $capacite): \App\Entity\Tournois
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCapacite', [$capacite]);

        return parent::setCapacite($capacite);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlatforme(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlatforme', []);

        return parent::getPlatforme();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlatforme(string $platforme): \App\Entity\Tournois
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlatforme', [$platforme]);

        return parent::setPlatforme($platforme);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecompense(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecompense', []);

        return parent::getRecompense();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecompense(string $recompense): \App\Entity\Tournois
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecompense', [$recompense]);

        return parent::setRecompense($recompense);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateTournois(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateTournois', []);

        return parent::getDateTournois();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateTournois(?\DateTimeInterface $dateTournois): \App\Entity\Tournois
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateTournois', [$dateTournois]);

        return parent::setDateTournois($dateTournois);
    }

    /**
     * {@inheritDoc}
     */
    public function getPtsXp(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPtsXp', []);

        return parent::getPtsXp();
    }

    /**
     * {@inheritDoc}
     */
    public function setPtsXp(?int $ptsXp): \App\Entity\Tournois
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPtsXp', [$ptsXp]);

        return parent::setPtsXp($ptsXp);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeT(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimeT', []);

        return parent::getTimeT();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimeT(?\DateTimeInterface $timeT): \App\Entity\Tournois
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimeT', [$timeT]);

        return parent::setTimeT($timeT);
    }

    /**
     * {@inheritDoc}
     */
    public function getParticipations(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParticipations', []);

        return parent::getParticipations();
    }

    /**
     * {@inheritDoc}
     */
    public function addParticipation(\App\Entity\equipe $participation): \App\Entity\Tournois
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addParticipation', [$participation]);

        return parent::addParticipation($participation);
    }

    /**
     * {@inheritDoc}
     */
    public function removeParticipation(\App\Entity\equipe $participation): \App\Entity\Tournois
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeParticipation', [$participation]);

        return parent::removeParticipation($participation);
    }

}
