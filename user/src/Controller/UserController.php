<?php

namespace App\Controller;
use Dompdf\Dompdf;
use Dompdf\Options;
use App\Entity\User;
use App\Form\UserType;
use App\Entity\Archive;
use App\Form\UploadType;
use App\Entity\FileUploader;
use Psr\Log\LoggerInterface;
use App\Form\ChangeEmailType;
use App\Form\ChangePhoneType;
use App\Form\NationalityType;
use App\Entity\ChangePassword;
use Doctrine\ORM\EntityManager;
use App\Form\ChangePasswordType;
use Symfony\Component\Mime\Email;
use App\Repository\UserRepository;
use App\Repository\TrashRepository;
use App\Repository\ArchiveRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Form\FileUploadError;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class UserController extends AbstractController
{
    /**
     * @Route("/error", name="error")
     */
    public function error(){
    
        return $this->render('security/error.html.twig');
    }


    /**
     * @IsGranted("ROLE_ADMIN")
     * @Route("/admin", name="app_user_index", methods={"GET"})
     */
    public function index(EntityManagerInterface $entityManager): Response
    {
        $users = $entityManager
            ->getRepository(User::class)
            ->findAll();

        return $this->render('user/index.html.twig', [
            'users' => $users,
        ]);
    }

    
    /**
     * 
     * @Security("is_granted('ROLE_USER')")
     * @Route("/profile/home", name="home")
     */
    public function homepage(){
        return $this->render('user/home.html.twig', [
        
        ]);

    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
     /**
      * @IsGranted("ROLE_USER")
     * @Route("/profile/settings/{id}", name="app_user_settings", methods={"GET", "POST"})
     */
    public function settings(Request $request, UserPasswordEncoderInterface $passwordEncoder,$id){
        $changePasswordModel = new ChangePassword();
        $form = $this->createForm(ChangePasswordType::class, $changePasswordModel);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();

            $u

        ]);

    }
    
    /**
     * @IsGranted("ROLE_USER")
     * @Route("/profile/new", name="app_user_new", methods={"GET", "POST"})
     */
    public function new(Request $request, EntityManagerInterface $entityManager): Response
    {
        $user = new User();
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

     
    }

 
    
    
 
}
